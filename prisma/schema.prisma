generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}


enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum QuotationStatus {
  DRAFT         // 草稿中
  SENT          // 已送出
  NEGOTIATING   // 客戶要求修改中
  FINALIZED     // 客戶確認
  CANCELLED     // 作廢
}


enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}
enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Department {
  id    String  @id @default(uuid())
  name  String  @unique
  users User[]
}

model Role {
  id    String  @id @default(uuid())
  name  String  @unique
  users User[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  department     Department? @relation(fields: [department_id], references: [id])
  department_id  String?
  role            Role? @relation(fields: [role_id], references: [id])
  role_id        String?
  status         UserStatus @default(ACTIVE)  
  createdAt      DateTime @default(now())

  leaveRequests  LeaveRequest[]
  managedProjects Project[] @relation("ProjectManager")
  assignedTasks   Task[]    @relation("TaskAssignee")
}
model LeaveRequest {
  id          String   @id @default(uuid())
  employee    User     @relation(fields: [employeeId], references: [id])
  employeeId  String
  type        String
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime @default(now())
  reviewedBy  String?    // approver's user id
  reviewedAt  DateTime?
}
model Client {
  id        String              @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?             // 客戶所屬公司（可選）
  notes     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  quotations ClientQuotation[]  // One-to-many
  projects   Project[]           // One-to-many
}

model Vendor {
  id          String               @id @default(cuid())
  name        String
  contactName String?             // 聯絡人姓名
  email       String?
  phone       String?
  company     String?             // 公司名稱（若有）
  address     String?
  notes       String?             // 備註欄
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  quotations  VendorQuotation[]   // 與 VendorQuotation 的一對多關聯
}

model VendorQuotation {
  id              String              @id @default(cuid())
  referenceCode   String              @unique
  vendorId      String
  projectId       String
  status          QuotationStatus     @default(DRAFT)
  totalAmount     Float
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  vendor        Vendor            @relation(fields: [vendorId], references: [id])
  project         Project             @relation(fields: [projectId], references: [id])
  items           VendorQuotationItem[]
}

model ClientQuotation {
  id              String              @id @default(cuid())
  referenceCode   String              @unique                     // 如 Q-2025-0001
  clientId        String
  projectId       String
  version         Int                 @default(1)
  status          QuotationStatus     @default(DRAFT)
  validUntil      DateTime?
  totalAmount     Float
  notes           String?
  confirmed       Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  client          Client              @relation(fields: [clientId], references: [id])
  project         Project             @relation(fields: [projectId], references: [id])
  items           ClientQuotationItem[]
}

model ClientQuotationItem {
  id                 String                @id @default(cuid())
  clientQuotationId  String
  name               String
  description        String?
  quantity           Int
  unitPrice          Float
  discount           Float                 @default(0)
  total              Float

  clientQuotation    ClientQuotation       @relation(fields: [clientQuotationId], references: [id])
  vendorItems        VendorQuotationItem[] @relation("ClientVendorLink") // optional: 可以對應多個供應商報價
}

model VendorQuotationItem {
  id                 String                @id @default(cuid())
  vendorQuotationId  String
  name               String
  description        String?
  quantity           Int
  unitPrice          Float
  total              Float

  vendorQuotation    VendorQuotation       @relation(fields: [vendorQuotationId], references: [id])
  
  // 與 ClientQuotationItem 建立多對多關聯（有些項目會對應到多個客戶報價項目）
  linkedClientItems  ClientQuotationItem[] @relation("ClientVendorLink")
}



// --- New Project Model ---
model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime      @map("start_date")
  endDate     DateTime      @map("end_date")
  status      ProjectStatus @default(NOT_STARTED)

  // Relation to the User who manages this project
  managerId   String?                            // Foreign key for the project manager
  manager     User?         @relation("ProjectManager", fields: [managerId], references: [id])

  tasks       Task[]        // A project can have many tasks (one-to-many)
  issues      Issue[]  

  client      Client?       @relation(fields: [clientId], references: [id])
  clientId    String?

  clientQuotations ClientQuotation[]
  vendorQuotations VendorQuotation[]
 
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("projects") // Maps to 'projects' table in your database
}

// --- New Task Model ---
model Task {
  id            String     @id @default(uuid())
  name          String
  description   String?
  startDate     DateTime   @map("start_date")
  endDate       DateTime   @map("end_date")
  status        TaskStatus @default(NOT_STARTED)

  // Relation to the parent Project
  projectId     String                           // Foreign key for the parent project
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade) // Task belongs to a Project

  // Relation to the User assigned to this task
  assignedToId  String?                          // Foreign key for the assigned user
  assignedTo    User?      @relation("TaskAssignee", fields: [assignedToId], references: [id])

  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("tasks") // Maps to 'tasks' table in your database
}

model Issue {
  id          String        @id @default(uuid())
  title       String
  description String?
  status      IssueStatus   @default(OPEN)
  priority    IssuePriority @default(MEDIUM)

  // Relation to the Project it belongs to
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("issues") // Optional: map to 'issues' table in database
}



